
jdk() {
	chmod 777 $1/jdk-6u35-linux-i586.bin
	echo $1
	jdk_time=`time $1/jdk-6u35-linux-i586.bin > /dev/null`
	if [ $? = 0 ]; then
		echo $jdk_time
		echo "jdk extracted within $";
	fi

	mv jdk1.6.0_35 $2/
}

maven() {
	tar xf $1/apache-maven-3.0.4-bin.tar.gz -C $2;
}

nexus() {
	[ -d $2/sonatype ] || mkdir -p $2/sonatype
	tar xf $1/nexus-2.1.2-bundle.tar.gz -C $2/sonatype;
}

build_java_env() {
	if [ -z $1 ]; then
		echo "input the path where packages resides";
		exit 1;
	fi
	# go to the dir, which include all the packages needed to buidl java env
	cd $1;
        cdir=`pwd`
	# test if this directory exists, if yes, delete it
	if [ -d monica ]; then
		rm monica -rf
	fi
	mkdir monica;
	cd monica;

	wget https://raw.github.com/jameslord/tools/master/env/luna_java/chenv_linux_jdk -O chenv
	chmod 777 chenv

	TOOLS=`pwd`/gov/tools;
	BIKE=$TOOLS/bike
	mkdir -p $BIKE

	maven $cdir $BIKE;
	nexus $cdir $BIKE;
	# extract jdk
	jdk $cdir $TOOLS;

}

#  //////    no space is allows around =
package_names=("apache-maven-3.0.4-bin.tar.gz" "jdk-6u35-linux-i586.bin" "nexus-2.1.2-bundle.tar.gz");
download_dir=$HOME/soft
download_packages() {

	if [ -z $1 ];then 
		echo "must specify base url";
		exit 1;
	fi

	if [ -d $download_dir ]; then
		echo "dir exists";
	# no colon here ///
	else
		mkdir -p $download_dir;
	fi
	cd $download_dir;

	for item in ${package_names[*]}
	do
		echo $item;
		wget $1/$item -O $item;
	done

}

install_method() {
	if [ -z $1 ]; then
		echo "please choose install method, local | remote";
		exit 1;
	fi

	if [ $1 = -h ]; then
		echo "$1 install method local | remote"
		# local storage dir is ~/software
		echo "$2 local path of package dir | remote base url";
	fi

	if [ $1 = local ]; then
		build_java_env $2;
	elif [ $1 = remote ]; then
	# package list should be separated
		echo "remote"
		download_packages $2;
		build_java_env $download_dir;
	fi
}

install_method $1 $2
#download_packages $1
